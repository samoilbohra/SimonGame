// declaring which colour are there in the game
var buttonColours = ["r", "y", "b", "g"];      
// we will store the patternthat will be generated by computer randomly
var gamePattern = []; 
// here we will store the pattern by the user                    
var userClickedPattern = [];
// it is the boolean if game has started or not it keeps check that the computer reacts to the keypress 
// only when game has not yet been started
var started = false;
// stores the level the game
var level = 0;

// it responds to the key press when game is not started 
$(document).on("keypress", function()  {
    if (!started) {
        
        nextSequence();
        started = true;  

    }

});

// it responds to the btn click 
// stores the button clicked to the user clicked pattern and checks the the button clicked is of the same pattern as the computer 

$(".btn").click( function () {
if(started === true){

    var userChosenColour = $(this).attr("id");
        userClickedPattern.push(userChosenColour);
  
   
    playSound(userChosenColour);
    animate(userChosenColour);
    checkAnswer(userClickedPattern.length-1);
}
else{
    var userChosenColour = $(this).attr("id");



playSound(userChosenColour);
animate(userChosenColour);

}
});

// it resets the level , gamepattern , started as if the game is newly started 
function startOver()
{
    started = false;
    gamePattern=[];
    level =0 ;
}



// this makes the next sequence that the computer selects and stores that selected pattern to game pattern
// and also increases the level every time it generates new sequence 
function nextSequence() {
    userClickedPattern = [];
    level++;
    $("h1").html("LEVEL " + level);

    var randomNumber = Math.floor(Math.random() * 4);
    var randomChosenColour = buttonColours[randomNumber];
    gamePattern.push(randomChosenColour);
    $("#" + randomChosenColour).fadeOut(100).fadeIn(100);
    playSound(randomChosenColour);
 
}

// it checks the answer 
// if  clicked pattern is correct and it has made all the colours of the generated game pattern it calls 
// next sequence to generate the ahead pattern
function  checkAnswer(currentLevel)
{

    if (userClickedPattern[currentLevel] === gamePattern[currentLevel]) 
    {
        console.log("SUCCESS");

        if (userClickedPattern.length === gamePattern.length) {
            setTimeout(function () {
                nextSequence();
            }, 1000);
        }
        
        
    }
    else {
        console.log("wrong");
        

        playSound("w");
        $("body").addClass("game-over");
        setTimeout( function(){
            $("body").removeClass("game-over");
        } ,200 );
        $("h1").html("GAME OVER Press any key to start !!");
        startOver();
    }
}













    function animate(x) {
        $("#" + x).fadeOut(10).fadeIn(10);
    }
    // function handler(x) {
    //     var userChosenColour = x;
    //     userClickedPattern.push(userChosenColour);
    //     console.log(userClickedPattern);

    // }
    function playSound(x) {
        var audio = new Audio("sounds/" + x + ".mp3");
        audio.play();
    }
